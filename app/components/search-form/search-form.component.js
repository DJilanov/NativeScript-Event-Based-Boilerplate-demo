"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var page_1 = require("ui/page");
var backend_service_1 = require("../../core/backend/backend.service");
var event_bus_service_1 = require("../../core/event-bus/event-bus.service");
var pitch_service_1 = require("../../services/pitch/pitch.service");
var dateRange = {
    minDate: new Date(1975, 0, 29),
    maxDate: new Date(2045, 0, 29)
};
var SearchFormComponent = (function () {
    function SearchFormComponent(page, pitchService, backendService, eventBusService) {
        this.page = page;
        this.pitchService = pitchService;
        this.backendService = backendService;
        this.eventBusService = eventBusService;
        this.pitchId = 32990;
        this.startDate = new Date();
        this.endDate = new Date();
        this.startDateButtonVisible = false;
        this.startDatePickerVisible = false;
        this.endDateButtonVisible = false;
        this.endDatePickerVisible = false;
    }
    SearchFormComponent.prototype.showStartDatePicker = function () {
        var textFieldStartDate = this.page.getViewById("startDateTextField");
        this.startDateButtonVisible = true;
        this.startDatePickerVisible = true;
        setTimeout(function () {
            textFieldStartDate.dismissSoftInput();
        }, 100);
    };
    SearchFormComponent.prototype.showEndDatePicker = function () {
        var textFieldEndDate = this.page.getViewById("endDateTextField");
        this.endDateButtonVisible = true;
        this.endDatePickerVisible = true;
        setTimeout(function () {
            textFieldEndDate.dismissSoftInput();
        }, 100);
    };
    SearchFormComponent.prototype.enterStartDate = function () {
        var datePicker = this.page.getViewById("startDatePicker");
        var selectedDate = new Date(datePicker.year, datePicker.month - 1, datePicker.day);
        this.startDate = selectedDate;
        this.startDateButtonVisible = false;
        this.startDatePickerVisible = false;
    };
    SearchFormComponent.prototype.enterEndDate = function () {
        var datePicker = this.page.getViewById("endDatePicker");
        var selectedDate = new Date(datePicker.year, datePicker.month - 1, datePicker.day);
        this.endDate = selectedDate;
        this.endDateButtonVisible = false;
        this.endDatePickerVisible = false;
    };
    SearchFormComponent.prototype.onDatePickerLoaded = function (args) {
        var datePicker = args.object;
        datePicker.minDate = dateRange.minDate;
        datePicker.maxDate = dateRange.maxDate;
    };
    SearchFormComponent.prototype.onSeachTap = function (event) {
        var _this = this;
        var idInput = this.page.getViewById("pitchId");
        idInput.dismissSoftInput();
        this.backendService.fetchPitches({
            id: idInput.text,
            startDate: this.startDate.toISOString().split('T')[0],
            endDate: this.endDate.toISOString().split('T')[0],
        }).then(function (response) {
            return response.json();
        }).then(function (jsonData) {
            _this.pitchService.setPitches(jsonData.data);
            _this.eventBusService.emitFetchedPitchData(jsonData.data);
        });
    };
    SearchFormComponent = __decorate([
        core_1.Component({
            selector: "ns-search-form",
            moduleId: module.id,
            templateUrl: "./search-form.component.html",
            styleUrls: ['./search-form.component.css']
        }),
        __metadata("design:paramtypes", [page_1.Page,
            pitch_service_1.PitchService,
            backend_service_1.BackendService,
            event_bus_service_1.EventBusService])
    ], SearchFormComponent);
    return SearchFormComponent;
}());
exports.SearchFormComponent = SearchFormComponent;
//# sourceMappingURL=data:application/json;base64,